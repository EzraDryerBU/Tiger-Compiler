structure A = Absyn

fun typeDecBuilder(newDec, (A.TypeDec first)::l) = A.TypeDec(newDec::first)::l
  | typeDecBuilder(newDec, first::l) = A.TypeDec([])::[]
  | typeDecBuilder(newDec, []) = A.TypeDec([newDec])::[];

fun funcDecBuilder(newDec, (A.FunctionDec first)::l) = A.FunctionDec(newDec::first)::l
  | funcDecBuilder(newDec, first::l) = A.FunctionDec([])::[]
  | funcDecBuilder(newDec, []) = A.FunctionDec([newDec])::[];

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  program of A.exp
        | exp of A.exp
        | lvalue of A.var
        | expSeq of A.exp
        | expEnder of (A.exp * pos) list (*Need tuple here so we can use SeqExp exp semicolon rule*)
        | funcArg of A.exp list
        | funcArgEnder of A.exp list
        | declist of A.dec list
        | typedecs of A.dec list
        | ty of A.ty
        | tyFields of A.field list
        | vardec of A.dec
        | funcdecs of A.dec list
        | fieldList of(A.symbol * A.exp * pos) list (*RecordExp from absyn for the field entries of records*)
        | typeDecGroupEnder of A.dec list
        | funcDecGroupEnder of A.dec list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

(*Lowest precedence at top of list, highest at bottom*)
%nonassoc ASSIGN
%nonassoc ID
%nonassoc WHILE DO
%right THEN
%right ELSE
%nonassoc LBRACK RBRACK OF
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE


%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
    DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%verbose

%%

program : exp                                   (exp)

exp: STRING                                     (A.StringExp(STRING, STRINGleft))
   | INT                                        (A.IntExp(INT))
   | NIL                                        (A.NilExp)
   | lvalue                                     (A.VarExp(lvalue))
   | MINUS exp                                  (A.OpExp({left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft}))
   | exp PLUS exp                               (A.OpExp({left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft}))
   | exp MINUS exp                              (A.OpExp({left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft}))
   | exp TIMES exp                              (A.OpExp({left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft}))
   | exp DIVIDE exp                             (A.OpExp({left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft}))
   | exp EQ exp                                 (A.OpExp({left=exp1, oper=A.EqOp, right=exp2, pos=EQleft}))
   | exp NEQ exp                                (A.OpExp({left=exp1, oper=A.NeqOp, right=exp2, pos=NEQleft}))
   | exp LT exp                                 (A.OpExp({left=exp1, oper=A.LtOp, right=exp2, pos=LTleft}))
   | exp LE exp                                 (A.OpExp({left=exp1, oper=A.LeOp, right=exp2, pos=LEleft}))
   | exp GT exp                                 (A.OpExp({left=exp1, oper=A.GtOp, right=exp2, pos=GTleft}))
   | exp GE exp                                 (A.OpExp({left=exp1, oper=A.GeOp, right=exp2, pos=GEleft}))
   | exp AND exp                                (A.IfExp({test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=ANDleft})) 
   | exp OR exp                                 (A.IfExp({test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=ORleft}))
   | lvalue ASSIGN exp                          (A.AssignExp({var=lvalue, exp=exp, pos=ASSIGNleft}))
   | ID LPAREN funcArg RPAREN                   (A.CallExp({func=Symbol.symbol ID, args=funcArg,pos=IDleft}))
   (*1st s/r error, explained below*)
   | LPAREN expSeq RPAREN                       (expSeq)
   (*1st s/r error, explained below*)
   (*2nd s/r error, explained below*)  
   | LPAREN exp SEMICOLON exp expEnder RPAREN   (A.SeqExp((exp1, exp1left)::(exp2, exp2left)::expEnder))
   (*1st s/r error, explained below*)
   | LPAREN RPAREN                              (A.SeqExp([]))
   | ID LBRACE fieldList RBRACE                 (A.RecordExp({fields=fieldList, typ=Symbol.symbol ID, pos=IDleft}))
   | ID LBRACK exp RBRACK OF exp                (A.ArrayExp({typ=Symbol.symbol ID, size=exp1, init=exp2, pos=IDleft}))
   | IF exp THEN exp ELSE exp                   (A.IfExp({test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft}))
   | IF exp THEN exp                            (A.IfExp({test=exp1, then'=exp2, else'=NONE, pos=IFleft}))
   | WHILE exp DO exp                           (A.WhileExp({test=exp1, body=exp2, pos=WHILEleft}))
   | FOR ID ASSIGN exp TO exp DO exp            (A.ForExp({var=Symbol.symbol ID, escape=ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft}))
   | BREAK                                      (A.BreakExp(BREAKleft))
   | LET declist IN expSeq END                  (A.LetExp({decs=declist, body=expSeq, pos=LETleft}))

(*Specifically for the part of let statements between IN and END*)
expSeq  : exp expEnder                          (A.SeqExp((exp, expleft)::expEnder))
        |                                       (A.SeqExp([]))

(*first derivation gives 2nd s/r error*)
expEnder : SEMICOLON exp expEnder               ((exp, expleft)::expEnder)
         |                                      ([])

(*This is for records in use, NOT their declaration*)
fieldList : ID EQ exp                           ((Symbol.symbol ID, exp, expleft)::[])
          | ID EQ exp COMMA fieldList           ((Symbol.symbol ID, exp, expleft)::fieldList)
          |                                     ([])

(*Need second to last last rule for accessing record fields*)
lvalue : ID                                     (A.SimpleVar(Symbol.symbol ID, IDleft))
       | lvalue DOT ID                          (A.FieldVar(lvalue, Symbol.symbol ID, DOTleft))
       | ID LBRACK exp RBRACK                   (A.SubscriptVar(A.SimpleVar(Symbol.symbol ID, IDleft),
                                                                exp, IDleft))
       | lvalue LBRACK exp RBRACK               (A.SubscriptVar(lvalue, exp, lvalueleft))

(*Each one handles a group of decs, vardec is special case since it is only one*)
declist : typedecs typeDecGroupEnder            (typedecs @ typeDecGroupEnder) (*sml has built in operator, @, for appending two lists*)
        | vardec declist                        (vardec::declist)
        | funcdecs funcDecGroupEnder            (funcdecs @ funcDecGroupEnder)
        |                                       ([])

(*To note here, if var is init to nil, we need to use first rule*)
vardec : VAR ID ASSIGN exp                      (A.VarDec({name=Symbol.symbol ID,
                                                           escape=ref true,
                                                           typ=NONE,
                                                           init=exp,
                                                           pos=VARleft}))
       | VAR ID COLON ID ASSIGN exp             (A.VarDec({name=Symbol.symbol ID,
                                                           escape=ref true,
                                                           typ=SOME(Symbol.symbol ID2, ID2left),
                                                           init=exp,
                                                           pos=VARleft}))

(*Just can't be another type decleration, borrow two rules from declist and empty rule*)
typeDecGroupEnder : vardec declist              (vardec::declist)
                  | funcdecs funcDecGroupEnder  (funcdecs @ funcDecGroupEnder)
                  |                             ([])

funcDecGroupEnder : vardec declist              (vardec::declist)
                  | typedecs typeDecGroupEnder  (typedecs @ typeDecGroupEnder)
                  |                             ([])

(*Last rule for chaining typedecs, might not need or might need other way*)
typedecs : TYPE ID EQ ty                        (A.TypeDec([{name=Symbol.symbol ID, ty=ty, pos=TYPEleft}])::[])
         | TYPE ID EQ ty typedecs               (typeDecBuilder({name=Symbol.symbol ID, ty=ty, pos=TYPEleft}, typedecs))

(*Basic patterns for rvalue of typedecs*)
ty : ID                                         (A.NameTy(Symbol.symbol ID, IDleft))
   | LBRACE tyFields RBRACE                     (A.RecordTy(tyFields))
   | ARRAY OF ID                                (A.ArrayTy(Symbol.symbol ID, ARRAYleft))

(*May be empty. Also may chain together in a record type*)
tyFields : tyFields COMMA ID COLON ID           (tyFields @ [{name=Symbol.symbol ID1, escape=ref true, 
                                                  typ=Symbol.symbol ID2, pos=COLONleft}])
         | ID COLON ID                          ({name=Symbol.symbol ID1, escape=ref true, 
                                                  typ=Symbol.symbol ID2, pos=COLONleft}::[])
         |                                      ([])

(*Don't know if I need first two rules, check to see if can remove and use empty rule*)
funcdecs : FUNCTION ID LPAREN tyFields RPAREN EQ exp                   (A.FunctionDec([{name=Symbol.symbol ID,
                                                                         params=tyFields,
                                                                         result=NONE,
                                                                         body=exp,
                                                                         pos=FUNCTIONleft}])::[])
         | FUNCTION ID LPAREN tyFields RPAREN COLON ID EQ exp          (A.FunctionDec([{name=Symbol.symbol ID1,
                                                                         params=tyFields,
                                                                         result=SOME(Symbol.symbol ID2, ID2left),
                                                                         body=exp,
                                                                         pos=FUNCTIONleft}])::[])
         | FUNCTION ID LPAREN tyFields RPAREN EQ exp funcdecs          (funcDecBuilder({name=Symbol.symbol ID, 
                                                                                          params=tyFields,
                                                                                          result=NONE, 
                                                                                          body=exp, 
                                                                                          pos=FUNCTIONleft}, funcdecs))
         | FUNCTION ID LPAREN tyFields RPAREN COLON ID EQ exp funcdecs (funcDecBuilder({name=Symbol.symbol ID1, 
                                                                                          params=tyFields,
                                                                                          result=SOME(Symbol.symbol ID2, ID2left), 
                                                                                          body=exp,
                                                                                          pos=FUNCTIONleft}, funcdecs))

funcArg : exp funcArgEnder                      (exp::funcArgEnder) 
        |                                       ([])

funcArgEnder : COMMA exp funcArgEnder           (exp::funcArgEnder)
             |                                  ([])

(*
1st Shift/Reduce error, caused by the rules:
exp : LPAREN . expSeq RPAREN 
exp : LPAREN . exp SEMICOLON exp expEnder RPAREN 
exp : LPAREN . RPAREN

This is necessary, as when you are at a point in the grammar where
you have a LPAREN shifted in, you might be able to shift in an RPAREN
and reduce to exp, or you may be able to shift in some other token in
hopes of reducing to (expSeq RPAREN) or (exp SEMICOLON exp expEnder RPAREN)
before reducing to exp. This conflict is necessary because in order to properly
parse expressions of the forms: (), (...) with some amount of expressions in
the ..., and (... ; ...) we need all three of these rules. Without one of them
we would need to add an empty rule to exp, which causes loads of other issues.
Maybe there is a better way to totally restructure the grammar to avoid these,
but I have not found it.



2nd Shift/Reduce error, caused by the rules:
exp : LPAREN exp SEMICOLON exp expEnder . RPAREN
expEnder : SEMICOLON exp expEnder .


Here we get an error from the fact that when we have
(LPAREN exp SEMICOLON exp expEnder) we can either shift in a RPAREN and reduce
to exp, or reduce (SEMICOLON exp expEnder) to expEnder, which leave us with
(LPAREN exp expEnder . RPAREN). This is actually fine, as this will reduce the
(exp expEnder) to expSeq, and then after shifting in RPAREN we can reduce
(LPAREN expSeq RPAREN) to just exp. So it ends up all in the same place, but this
error arises from the fact that in order to parse function bodies the first rule needs
to make sure that what is being parsed is actually a function body, and not something else
surrounded by parens. This requires matching on at least one semicolon. Then later expressions
all also need to be followed by semicolons, so expEnder, which helps build the list of exps that
make up a function's body, also needs to match on semicolons.
*)




