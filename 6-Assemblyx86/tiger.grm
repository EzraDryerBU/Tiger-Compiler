structure A = Absyn
structure S = Symbol

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  decs of A.dec list | nontydecs of A.dec list | nonfundecs of A.dec list |
          tydecs of {name: S.symbol, ty: A.ty, pos: pos} list |
          tydec of {name: S.symbol, ty: A.ty, pos: pos} |
          ty of A.ty | tyfields of A.field list | tyfield of A.field |
          vardec of A.dec | fundecs of A.fundec list | fundec of A.fundec |
          expseq of (A.exp * pos) list | expcomma of A.exp list | exp of A.exp | mexp of A.exp | uexp of A.exp | explist | expb of A.exp |
          idexplist of (S.symbol * A.exp * pos) list | lvalue of A.var | program of A.exp

%right SEMICOLON
%left ASSIGN


%left AND OR

%nonassoc EQ
%nonassoc NEQ
%nonassoc LT
%nonassoc LE
%nonassoc GT
%nonassoc GE


%left PLUS MINUS
%left TIMES DIVIDE

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp				(exp)

decs :                    ([])
     | tydecs nontydecs   (A.TypeDec tydecs :: nontydecs)
     | fundecs nonfundecs (A.FunctionDec fundecs :: nonfundecs)
     | vardec decs        (vardec :: decs)

nontydecs :                    ([])
          | fundecs nonfundecs (A.FunctionDec fundecs :: nonfundecs)
          | vardec decs        (vardec :: decs)

nonfundecs :                    ([])
           | tydecs nontydecs   (A.TypeDec tydecs :: nontydecs)
           | vardec decs        (vardec :: decs)

tydecs : tydec           ([tydec])
       | tydec tydecs    (tydec :: tydecs)

tydec : TYPE ID EQ ty ({ name = S.symbol ID, ty = ty, pos = EQleft})

ty : ID (A.NameTy (S.symbol ID, IDleft))
   | LBRACE tyfields RBRACE (A.RecordTy tyfields)
   | ARRAY OF ID (A.ArrayTy (S.symbol ID, IDleft))

tyfields : ([])
         | tyfield ([tyfield])
         | tyfield COMMA tyfields (tyfield :: tyfields)

tyfield : ID COLON ID ( { name = S.symbol ID1, escape = ref true, typ = S.symbol ID2, pos = COLONleft} )

vardec : VAR ID ASSIGN exp (A.VarDec { name = S.symbol ID1
                                     , escape = ref true
                                     , typ = NONE
                                     , init = exp
                                     , pos = ASSIGNleft })
       | VAR ID COLON ID ASSIGN exp (A.VarDec { name = S.symbol ID1
                                              , escape = ref true
                                              , typ = SOME (S.symbol ID2, ID2left)
                                              , init = exp
                                              , pos = ASSIGNleft })

fundecs : fundec         ([fundec])
        | fundec fundecs (fundec :: fundecs)


fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp ( { name = S.symbol ID1,
                                                       params = tyfields,
                                                       result = NONE,
                                                       body = exp,
                                                       pos = ID1left } )
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ( { name = S.symbol ID1,
                                                                params = tyfields,
                                                                result = SOME (S.symbol ID2, ID2left),
                                                                body = exp,
                                                                pos = ID1left } )

lvalue : ID                         (A.SimpleVar (S.symbol ID, IDleft))
       (* We get shift/reduce conflicts because of the
          below rules, combined with the array creation rule.
          Trying to untangle this would require large and probably
          confusing changes to the parser. *)
       | lvalue DOT ID              (A.FieldVar (lvalue, S.symbol ID, lvalueleft))
       | ID LBRACK exp RBRACK       (A.SubscriptVar (A.SimpleVar (S.symbol ID, IDleft), exp, IDleft))
       | lvalue LBRACK exp RBRACK   (A.SubscriptVar (lvalue, exp, lvalueleft))

expseq : exp ([(exp, expleft)])
       | exp SEMICOLON expseq ((exp, expleft) :: expseq)

expcomma : exp ([exp])
         | exp COMMA expcomma (exp :: expcomma)

exp : mexp (mexp)
    | uexp (uexp)

mexp : LET decs IN END (A.LetExp { decs = decs, body = A.NilExp, pos = LETleft })
     | LET decs IN expseq END (A.LetExp { decs = decs, body = A.SeqExp expseq, pos = LETleft })
     | IF exp THEN mexp ELSE mexp (A.IfExp { test = exp, then' = mexp1, else' = SOME mexp2, pos = IFleft })
     | WHILE exp DO mexp (A.WhileExp { test = exp, body = mexp, pos = WHILEleft})
     | FOR ID ASSIGN exp TO exp DO mexp (A.ForExp { var = S.symbol ID, escape = ref true, lo = exp1, hi = exp2, body = mexp, pos = FORleft })
     | ID LBRACK exp RBRACK OF mexp (A.ArrayExp { typ = S.symbol ID, size = exp, init = mexp, pos = IDleft}) (* array creation *)
     | expb (expb)

uexp : IF exp THEN exp (A.IfExp { test = exp1, then' = exp2, else' = NONE, pos = IFleft })
     | IF exp THEN mexp ELSE uexp (A.IfExp { test = exp, then' = mexp, else' = SOME uexp, pos = IFleft })
     | WHILE exp DO uexp (A.WhileExp { test = exp, body = uexp, pos = WHILEleft})
     | FOR ID ASSIGN exp TO exp DO uexp (A.ForExp { var = S.symbol ID, escape = ref true, lo = exp1, hi = exp2, body = uexp, pos = FORleft })
     | ID LBRACK exp RBRACK OF uexp (A.ArrayExp { typ = S.symbol ID, size = exp, init = uexp, pos = IDleft})

expb : lvalue (A.VarExp lvalue)
     | NIL (A.NilExp)
     | BREAK (A.BreakExp BREAKleft)
     | LPAREN expseq RPAREN (A.SeqExp expseq)
     | LPAREN RPAREN (A.SeqExp [])
     | INT (A.IntExp (INT))
     | STRING (A.StringExp (STRING, STRINGleft))
     | ID LPAREN RPAREN (A.CallExp { func = S.symbol ID, args = [], pos = IDleft })
     | ID LPAREN expcomma RPAREN (A.CallExp { func = S.symbol ID, args = expcomma, pos = IDleft })

     | expb TIMES expb (A.OpExp { left = expb1, oper = A.TimesOp, right = expb2, pos = TIMESleft })
     | expb DIVIDE expb (A.OpExp { left = expb1, oper = A.DivideOp, right = expb2, pos = DIVIDEleft })
     | expb PLUS expb (A.OpExp { left = expb1, oper = A.PlusOp, right = expb2, pos = PLUSleft })
     | expb MINUS expb (A.OpExp { left = expb1, oper = A.MinusOp, right = expb2, pos = MINUSleft })
     | MINUS expb %prec TIMES (A.OpExp { left = A.IntExp 0, oper = A.MinusOp, right = expb, pos = MINUSleft })

     | expb EQ expb (A.OpExp { left = expb1, oper = A.EqOp, right = expb2, pos = EQleft })
     | expb NEQ expb (A.OpExp { left = expb1, oper = A.NeqOp, right = expb2, pos = NEQleft })
     | expb LT expb (A.OpExp { left = expb1, oper = A.LtOp, right = expb2, pos = LTleft })
     | expb LE expb (A.OpExp { left = expb1, oper = A.LeOp, right = expb2, pos = LEleft })
     | expb GT expb (A.OpExp { left = expb1, oper = A.GtOp, right = expb2, pos = GTleft })
     | expb GE expb (A.OpExp { left = expb1, oper = A.GeOp, right = expb2, pos = GEleft })

     | expb AND expb (A.IfExp { test = expb1, then' = expb2, else' = SOME (A.IntExp 0), pos = ANDleft } )
     | expb OR expb (A.IfExp { test = expb1, then' = A.IntExp 1, else' = SOME expb2, pos = ORleft } )

     | lvalue ASSIGN expb (A.AssignExp { var = lvalue, exp = expb, pos = ASSIGNleft })

     (* record creation *)
     | ID LBRACE idexplist RBRACE (A.RecordExp { typ = S.symbol ID, fields = idexplist, pos = IDleft })
     | ID LBRACE RBRACE (A.RecordExp { typ = S.symbol ID, fields = [], pos = IDleft })


idexplist : ID EQ exp ([(S.symbol ID, exp, IDleft)])
          | ID EQ exp COMMA idexplist ((S.symbol ID, exp, IDleft) :: idexplist)